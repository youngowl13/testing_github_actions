name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Analyze Licenses
      - name: Analyze Licenses
        run: |
          # Create the analyze-licenses.js script
          cat << 'EOF' > analyze-licenses.js
          const fs = require('fs');
          const path = require('path');
          const https = require('https');

          const copyleftLicenses = [
              "GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL",
              "GPL-2.0", "GPL-3.0", "LGPL-2.1", "LGPL-3.0", "AGPL-3.0",
              "MPL-1.1", "MPL-2.0", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
              "EPL-1.0", "EPL-2.0", "OFL", "CPL", "OSL", "APL"
          ];

          function isCopyleftLicense(license) {
              return copyleftLicenses.some(copyleft => license.toUpperCase().includes(copyleft));
          }

          function findFile(dir, targetFile) {
              const files = fs.readdirSync(dir, { withFileTypes: true });
              for (const file of files) {
                  const fullPath = path.join(dir, file.name);
                  if (file.isFile() && file.name === targetFile) return fullPath;
                  if (file.isDirectory()) {
                      const found = findFile(fullPath, targetFile);
                      if (found) return found;
                  }
              }
              return null;
          }

          async function fetchKotlinLicenseFromSonatype(group, artifact, version) {
              return new Promise((resolve, reject) => {
                  const searchUrl = `https://central.sonatype.com/artifact/${group}/${artifact}/${version}`;
                  https.get(searchUrl, (res) => {
                      let data = '';
                      res.on('data', (chunk) => {
                          data += chunk;
                      });
                      res.on('end', () => {
                          try {
                              const licenseMatch = data.match(/<span class="license-name">([^<]+)<\/span>/);
                              if (licenseMatch && licenseMatch[1]) {
                                  resolve(licenseMatch[1].trim());
                              } else {
                                  resolve("Unknown");
                              }
                          } catch (error) {
                              console.error(`Error parsing license data for ${group}:${artifact}:${version}:`, error);
                              resolve("Unknown");
                          }
                      });
                  }).on('error', (error) => {
                      console.error(`Error fetching license for ${group}:${artifact}:${version}:`, error.message);
                      resolve("Unknown");
                  });
              });
          }

          async function analyzeKotlinDependencies() {
              const results = [];
              const tomlFile = findFile('.', 'libs.versions.toml');
              if (tomlFile) {
                  const tomlContent = fs.readFileSync(tomlFile, 'utf-8');
                  const matches = tomlContent.matchAll(/(?<group>[\w.]+):(?<artifact>[\w-]+)\s*=\s*["'](?<version>[^"']+)["']/g);
                  for (const match of matches) {
                      const { group, artifact, version } = match.groups;
                      const license = await fetchKotlinLicenseFromSonatype(group, artifact, version);
                      const sonatypeUrl = `https://central.sonatype.com/artifact/${group}/${artifact}/${version}`;
                      results.push({
                          group,
                          artifact,
                          version,
                          license,
                          detailsUrl: sonatypeUrl,
                          copyleft: isCopyleftLicense(license)
                      });
                  }
              }
              return results;
          }

          async function generateHtmlReport(kotlinResults) {
              const htmlContent = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>Kotlin Dependency License Report</title>
                      <style>
                          table { width: 100%; border-collapse: collapse; }
                          th, td { border: 1px solid #ddd; padding: 8px; }
                          th { background-color: #f2f2f2; }
                          .copyleft { background-color: #f8d7da; color: #721c24; }
                          .non-copyleft { background-color: #d4edda; color: #155724; }
                      </style>
                  </head>
                  <body>
                      <h1>Kotlin Dependency License Report</h1>
                      <table>
                          <tr>
                              <th>Group</th>
                              <th>Artifact</th>
                              <th>Version</th>
                              <th>License</th>
                              <th>Details</th>
                          </tr>
                          ${kotlinResults.map(r => `
                              <tr class="${r.copyleft ? 'copyleft' : 'non-copyleft'}">
                                  <td>${r.group}</td>
                                  <td>${r.artifact}</td>
                                  <td>${r.version}</td>
                                  <td>${r.license}</td>
                                  <td><a href="${r.detailsUrl}" target="_blank">Details</a></td>
                              </tr>`).join('')}
                      </table>
                  </body>
                  </html>
              `;
              fs.writeFileSync('dependency-license-report.html', htmlContent);
          }

          async function main() {
              const kotlinResults = await analyzeKotlinDependencies();
              await generateHtmlReport(kotlinResults);
              console.log('HTML report generated: dependency-license-report.html');
          }

          main().catch(err => console.error(err));
          EOF

          # Run the script
          node analyze-licenses.js

      # Step 4: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

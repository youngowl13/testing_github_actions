name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Set up Compatible Python
      - name: Setup Compatible Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Step 4: Run License Analysis Script
      - name: Analyze Licenses
        run: |
          # Create the analyze-licenses.js script
          cat << 'EOF' > analyze-licenses.js
          const fs = require('fs');
          const https = require('https');
          const { parseDocument } = require('htmlparser2');

          // Define copyleft licenses
          const copyleftLicenses = [
              "GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL",
              "GPL-2.0", "GPL-3.0", "LGPL-2.1", "LGPL-3.0", "AGPL-3.0",
              "MPL-1.1", "MPL-2.0", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
              "EPL-1.0", "EPL-2.0", "OFL", "CPL", "OSL", "APL"
          ];

          function isCopyleftLicense(license) {
              return copyleftLicenses.some(copyleft => license?.toUpperCase().includes(copyleft));
          }

          function fetchNpmPackageInfo(packageName) {
              const url = `https://registry.npmjs.org/${packageName}`;
              return new Promise((resolve, reject) => {
                  https.get(url, (res) => {
                      let data = '';
                      res.on('data', (chunk) => (data += chunk));
                      res.on('end', () => resolve(JSON.parse(data)));
                  }).on('error', (err) => reject(err));
              });
          }

          async function analyzeDependencies() {
              const results = [];
              if (fs.existsSync('package.json')) {
                  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
                  const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

                  for (const [pkg, version] of Object.entries(dependencies)) {
                      try {
                          const response = await fetchNpmPackageInfo(pkg);
                          const latestVersion = response['dist-tags']?.latest || version;
                          const license = response.versions[latestVersion]?.license || "Unknown";
                          const npmUrl = `https://www.npmjs.com/package/${pkg}`;
                          results.push({
                              name: pkg,
                              version: latestVersion,
                              license,
                              link: npmUrl,
                              isCopyleft: isCopyleftLicense(license)
                          });
                      } catch (error) {
                          console.error(`Failed to fetch details for ${pkg}: ${error.message}`);
                      }
                  }
              }
              return results;
          }

          async function generateHtmlReport(results) {
              const reportContent = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>Dependency License Report</title>
                      <style>
                          table { width: 100%; border-collapse: collapse; }
                          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                          th { background-color: #f2f2f2; }
                          .copyleft { background-color: #f8d7da; color: #721c24; }
                          .non-copyleft { background-color: #d4edda; color: #155724; }
                      </style>
                  </head>
                  <body>
                      <h1>Dependency License Report</h1>
                      <table>
                          <tr>
                              <th>Package</th>
                              <th>Version</th>
                              <th>License</th>
                              <th>Details</th>
                          </tr>
                          ${results.map(r => `
                              <tr class="${r.isCopyleft ? 'copyleft' : 'non-copyleft'}">
                                  <td>${r.name}</td>
                                  <td>${r.version}</td>
                                  <td>${r.license}</td>
                                  <td><a href="${r.link}" target="_blank">View Details</a></td>
                              </tr>`).join('')}
                      </table>
                  </body>
                  </html>
              `;
              fs.writeFileSync('dependency-license-report.html', reportContent);
          }

          async function main() {
              const results = await analyzeDependencies();
              await generateHtmlReport(results);
              console.log('HTML report generated as dependency-license-report.html');
          }

          main().catch(err => console.error(err));
          EOF

          # Run the script
          node analyze-licenses.js

      # Step 5: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

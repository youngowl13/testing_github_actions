name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.19"

      # Step 3: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "html/template"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"
          )

          type Dependency struct {
              Package  string
              Version  string
              License  string
              Details  string
          }

          type Report struct {
              NodeDependencies    []Dependency
              PythonDependencies  []Dependency
              KotlinDependencies  []Dependency
          }

          func findFile(root, filename string) string {
              var result string
              filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
                  if err == nil && strings.Contains(info.Name(), filename) {
                      result = path
                      return filepath.SkipDir
                  }
                  return nil
              })
              return result
          }

          func fetchLicense(packageName, version, packageType string) string {
              var apiURL string
              if packageType == "node" {
                  apiURL = fmt.Sprintf("https://registry.npmjs.org/%s", packageName)
              } else if packageType == "python" {
                  apiURL = fmt.Sprintf("https://pypi.org/pypi/%s/json", packageName)
              } else if packageType == "kotlin" {
                  apiURL = fmt.Sprintf("https://central.sonatype.com/artifact/%s/%s", packageName, version)
              }

              resp, err := http.Get(apiURL)
              if err != nil {
                  return "Unknown"
              }
              defer resp.Body.Close()

              var result map[string]interface{}
              body, _ := ioutil.ReadAll(resp.Body)
              json.Unmarshal(body, &result)

              if packageType == "node" && result["license"] != nil {
                  return result["license"].(string)
              } else if packageType == "python" && result["info"] != nil {
                  return result["info"].(map[string]interface{})["license"].(string)
              }

              return "Unknown"
          }

          func parseDependencies(filePath, packageType string) []Dependency {
              content, err := ioutil.ReadFile(filePath)
              if err != nil {
                  return nil
              }

              var dependencies []Dependency
              if packageType == "node" {
                  var pkgJSON map[string]interface{}
                  json.Unmarshal(content, &pkgJSON)

                  deps := pkgJSON["dependencies"].(map[string]interface{})
                  for name, version := range deps {
                      license := fetchLicense(name, version.(string), "node")
                      dependencies = append(dependencies, Dependency{
                          Package:  name,
                          Version:  version.(string),
                          License:  license,
                          Details:  fmt.Sprintf("https://www.npmjs.com/package/%s", name),
                      })
                  }
              } else if packageType == "python" {
                  lines := strings.Split(string(content), "\n")
                  for _, line := range lines {
                      if line == "" {
                          continue
                      }
                      parts := strings.Split(line, "==")
                      name := parts[0]
                      version := "Latest"
                      if len(parts) > 1 {
                          version = parts[1]
                      }
                      license := fetchLicense(name, version, "python")
                      dependencies = append(dependencies, Dependency{
                          Package:  name,
                          Version:  version,
                          License:  license,
                          Details:  fmt.Sprintf("https://pypi.org/project/%s", name),
                      })
                  }
              }
              return dependencies
          }

          func generateHTMLReport(report Report) {
              tmpl := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                      th { background-color: #f2f2f2; }
                      .unknown { background-color: #fdd; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  {{range $section, $deps := .}}
                      <h2>{{$section}}</h2>
                      <table>
                          <tr>
                              <th>Package</th>
                              <th>Version</th>
                              <th>License</th>
                              <th>Details</th>
                          </tr>
                          {{range $deps}}
                              <tr class="{{if eq .License "Unknown"}}unknown{{end}}">
                                  <td>{{.Package}}</td>
                                  <td>{{.Version}}</td>
                                  <td>{{.License}}</td>
                                  <td><a href="{{.Details}}" target="_blank">Details</a></td>
                              </tr>
                          {{end}}
                      </table>
                  {{end}}
              </body>
              </html>
              `

              t := template.Must(template.New("report").Parse(tmpl))
              f, _ := os.Create("dependency-license-report.html")
              defer f.Close()
              t.Execute(f, report)
          }

          func main() {
              nodeFile := findFile(".", "package.json")
              pythonFile := findFile(".", "requirements.txt")
              kotlinFile := findFile(".", "libs.versions.toml")

              nodeDeps := parseDependencies(nodeFile, "node")
              pythonDeps := parseDependencies(pythonFile, "python")
              // Add logic for Kotlin dependencies if necessary

              report := Report{
                  NodeDependencies:    nodeDeps,
                  PythonDependencies:  pythonDeps,
                  KotlinDependencies:  nil, // Add Kotlin logic
              }
              generateHTMLReport(report)
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker .

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 5: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-license-report
          path: dependency-license-report.html

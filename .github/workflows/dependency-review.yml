name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 4: Install Node.js Dependencies
      - name: Install Node.js Dependencies
        run: npm install --legacy-peer-deps

      # Step 5: Install Additional Node.js Dependencies
      - name: Install Additional Node.js Dependencies
        run: npm install cheerio axios

      # Step 6: Create and Run License Check Script Inline
      - name: Analyze Licenses
        run: |
          # Create the analyze-licenses.js script
          cat << 'EOF' > analyze-licenses.js
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const cheerio = require('cheerio');

          // List of common copyleft licenses and variations
          const copyleftLicenses = [
              "GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL",
              "GPL-2.0", "GPL-3.0", "LGPL-2.1", "LGPL-3.0", "AGPL-3.0",
              "MPL-1.1", "MPL-2.0", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
              "EPL-1.0", "EPL-2.0", "OFL", "CPL", "OSL", "APL"
          ];

          // Function to determine if a license is copyleft
          function isCopyleftLicense(license) {
              return copyleftLicenses.some(copyleft => license.toUpperCase().includes(copyleft));
          }

          // Function to recursively search for a specific file
          function findFileRecursively(dir, fileName) {
              const files = fs.readdirSync(dir, { withFileTypes: true });
              for (const file of files) {
                  const fullPath = path.join(dir, file.name);
                  if (file.isFile() && file.name === fileName) {
                      return fullPath;
                  }
                  if (file.isDirectory()) {
                      const found = findFileRecursively(fullPath, fileName);
                      if (found) return found;
                  }
              }
              return null;
          }

          // Function to parse libs.versions.toml
          function parseToml(filePath) {
              const toml = fs.readFileSync(filePath, 'utf-8');
              const sections = {};
              let currentSection = null;

              toml.split('\n').forEach(line => {
                  line = line.trim();
                  if (line.startsWith('[')) {
                      currentSection = line.replace(/\[|\]/g, '').trim();
                      sections[currentSection] = {};
                  } else if (line && currentSection) {
                      const [key, value] = line.split('=').map(part => part.trim());
                      sections[currentSection][key] = value.replace(/"|'/g, ''); // Remove quotes
                  }
              });

              return sections;
          }

          // Function to fetch license from PyPI page
          async function fetchLicenseFromPyPIPage(packageName) {
              try {
                  const response = await axios.get(`https://pypi.org/project/${packageName}`);
                  const $ = cheerio.load(response.data);
                  const license = $('meta:contains("License")')
                      .parent()
                      .text()
                      .trim()
                      .split('\n')
                      .find(line => line.includes("License"))
                      ?.replace("License", "")
                      ?.trim();
                  return license || "Unknown";
              } catch (error) {
                  console.error(`Error fetching license from PyPI page for ${packageName}:`, error.message);
                  return "Unknown";
              }
          }

          async function analyzePythonDependencies() {
              const results = [];
              const requirementsFile = findFileRecursively('.', 'requirements.txt') || findFileRecursively('.', 'requirement.txt');

              if (!requirementsFile) {
                  console.log("No requirements.txt or requirement.txt found.");
                  return { results, message: "No Python dependencies found." };
              }

              console.log(`Analyzing Python dependencies from ${requirementsFile}...`);
              const dependencies = fs.readFileSync(requirementsFile, 'utf-8').split('\n').filter(Boolean);

              for (const dependency of dependencies) {
                  const packageName = dependency.split('==')[0];
                  console.log(`\nAnalyzing ${packageName}...`);
                  try {
                      const response = await axios.get(`https://pypi.org/pypi/${packageName}/json`);
                      const info = response.data.info;
                      let license = info.license || "Unknown";
                      const pypiUrl = info.project_url || `https://pypi.org/project/${packageName}`;

                      // Fallback to scrape PyPI page if license is "Unknown"
                      if (license === "Unknown") {
                          console.log(`License for ${packageName} is unknown, fetching from PyPI page...`);
                          license = await fetchLicenseFromPyPIPage(packageName);
                      }

                      const copyleft = isCopyleftLicense(license);

                      results.push({
                          packageName,
                          version: dependency.split('==')[1] || "Latest",
                          license,
                          detailsUrl: pypiUrl,
                          copyleft,
                          type: "Python"
                      });
                  } catch (error) {
                      console.error(`Error fetching details for ${packageName}:`, error.message);
                  }
              }

              return { results, message: "" };
          }

          async function analyzeGradleDependencies() {
              const results = [];
              const tomlFile = findFileRecursively('.', 'libs.versions.toml'); // Search recursively for libs.versions.toml

              if (!tomlFile) {
                  console.log("No libs.versions.toml file found.");
                  return { results, message: "No Gradle dependencies found." };
              }

              console.log(`Found libs.versions.toml at ${tomlFile}.`);
              const sections = parseToml(tomlFile);
              const versions = sections.versions || {};
              const libraries = sections.libraries || {};

              for (const [key, lib] of Object.entries(libraries)) {
                  const group = lib.match(/group\s*=\s*"([^"]+)"/)?.[1];
                  const name = lib.match(/name\s*=\s*"([^"]+)"/)?.[1];
                  const versionRef = lib.match(/version\.ref\s*=\s*"([^"]+)"/)?.[1];
                  const version = versions[versionRef];

                  if (group && name && version) {
                      console.log(`Analyzing ${group}:${name}:${version}...`);
                      try {
                          const response = await axios.get(`https://search.maven.org/solrsearch/select?q=g:"${group}" AND a:"${name}"&rows=1`);
                          const doc = response.data.response.docs[0];
                          const license = doc?.licenses?.[0] || "Unknown";
                          const mavenUrl = `https://mvnrepository.com/artifact/${group}/${name}`;
                          const copyleft = isCopyleftLicense(license);

                          results.push({
                              group,
                              name,
                              version,
                              license,
                              detailsUrl: mavenUrl,
                              copyleft,
                              type: "Gradle"
                          });
                      } catch (error) {
                          console.error(`Error fetching details for ${group}:${name}:${version}:`, error.message);
                      }
                  }
              }

              return { results, message: "" };
          }

          async function generateHtmlReport() {
              const logoUrl = "https://home.solwerindia.com/_next/static/media/logo.e8b7d2b2.png";
              const repoName = process.env.GITHUB_REPOSITORY?.split('/')[1] || "Repository";

              const gradleAnalysis = await analyzeGradleDependencies();
              const pythonAnalysis = await analyzePythonDependencies();

              const htmlContent = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                      <title>Dependency License Report</title>
                      <style>
                          table {
                              width: 100%;
                              border-collapse: collapse;
                          }
                          th, td {
                              border: 1px solid #ddd;
                              padding: 8px;
                              text-align: left;
                          }
                          th {
                              background-color: #f2f2f2;
                          }
                          .copyleft {
                              background-color: #f8d7da;
                              color: #721c24;
                          }
                          .non-copyleft {
                              background-color: #d4edda;
                              color: #155724;
                          }
                          .logo {
                              display: block;
                              margin: 0 auto;
                              width: 200px;
                          }
                          h1 {
                              text-align: center;
                          }
                      </style>
                  </head>
                  <body>
                      <img src="${logoUrl}" alt="Logo" class="logo" />
                      <h1>Dependency License Report for ${repoName}</h1>

                      <h2>Gradle Dependencies</h2>
                      ${gradleAnalysis.message ? `<p>${gradleAnalysis.message}</p>` : ""}
                      <table>
                          <tr>
                              <th>Group</th>
                              <th>Artifact</th>
                              <th>Version</th>
                              <th>License</th>
                              <th>Details</th>
                          </tr>
                          ${gradleAnalysis.results.map(result => `
                              <tr class="${result.copyleft ? 'copyleft' : 'non-copyleft'}">
                                  <td>${result.group}</td>
                                  <td>${result.name}</td>
                                  <td>${result.version}</td>
                                  <td>${result.license}</td>
                                  <td><a href="${result.detailsUrl}" target="_blank">View Details</a></td>
                              </tr>
                          `).join('')}
                      </table>
                  </body>
                  </html>
              `;

              fs.writeFileSync('dependency-license-report.html', htmlContent);
              console.log('Report generated: dependency-license-report.html');
          }

          generateHtmlReport();
          EOF

          # Run the script
          node analyze-licenses.js

      # Step 7: Upload HTML Report as an Artifact
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

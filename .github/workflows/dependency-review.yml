name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          # Add Go code
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "io/fs"
              "net/http"
              "os"
              "path/filepath"
              "strings"
          )

          type Dependency struct {
              Name    string
              License string
              Details string
          }

          func main() {
              nodeFile := findFile(".", "package.json")
              pythonFile := findFile(".", "requirements.txt")
              if pythonFile == "" {
                  pythonFile = findFile(".", "requirement.txt")
              }
              kotlinFile := findFile(".", "libs.versions.toml")

              nodeDeps := parseNodeDependencies(nodeFile)
              pythonDeps := parsePythonDependencies(pythonFile)
              kotlinDeps := parseKotlinDependencies(kotlinFile)

              generateHTMLReport(nodeDeps, pythonDeps, kotlinDeps)
              fmt.Println("Dependency license report generated: dependency-license-report.html")
          }

          func findFile(root, target string) string {
              var found string
              filepath.WalkDir(root, func(path string, d fs.DirEntry, err error) error {
                  if err != nil {
                      return nil
                  }
                  if d.Name() == target {
                      found = path
                      return filepath.SkipDir
                  }
                  return nil
              })
              return found
          }

          func parseNodeDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Node.js dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading package.json:", err)
                  return nil
              }

              var data map[string]interface{}
              if err := json.Unmarshal(file, &data); err != nil {
                  fmt.Println("Error parsing package.json:", err)
                  return nil
              }

              dependencies, ok := data["dependencies"].(map[string]interface{})
              if !ok {
                  fmt.Println("No dependencies found in package.json.")
                  return nil
              }

              for name := range dependencies {
                  license, details := fetchNodeLicense(name)
                  result = append(result, Dependency{
                      Name:    name,
                      License: license,
                      Details: details,
                  })
              }
              return result
          }

          func fetchNodeLicense(pkgName string) (string, string) {
              url := fmt.Sprintf("https://registry.npmjs.org/%s", pkgName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", url
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              json.NewDecoder(resp.Body).Decode(&data)

              latestTag, ok := data["dist-tags"].(map[string]interface{})["latest"].(string)
              if !ok {
                  return "Unknown", url
              }

              versions, ok := data["versions"].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              versionData, ok := versions[latestTag].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              license, ok := versionData["license"].(string)
              if !ok {
                  return "Unknown", url
              }

              return license, fmt.Sprintf("https://www.npmjs.com/package/%s", pkgName)
          }

          func parsePythonDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Python dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading requirements.txt:", err)
                  return nil
              }

              lines := strings.Split(string(file), "\n")
              for _, line := range lines {
                  if line == "" {
                      continue
                  }
                  pkg := strings.Split(line, "==")[0]
                  license, details := fetchPythonLicense(pkg)
                  result = append(result, Dependency{
                      Name:    pkg,
                      License: license,
                      Details: details,
                  })
              }
              return result
          }

          func fetchPythonLicense(pkgName string) (string, string) {
              url := fmt.Sprintf("https://pypi.org/pypi/%s/json", pkgName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", url
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              json.NewDecoder(resp.Body).Decode(&data)

              info, ok := data["info"].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              license, ok := info["license"].(string)
              if !ok {
                  return "Unknown", url
              }

              projectURL, ok := info["project_url"].(string)
              if !ok {
                  return url, url
              }

              return license, projectURL
          }

          func parseKotlinDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Kotlin dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading libs.versions.toml:", err)
                  return nil
              }

              lines := strings.Split(string(file), "\n")
              for _, line := range lines {
                  if !strings.Contains(line, "=") {
                      continue
                  }
                  parts := strings.Split(line, "=")
                  pkg := strings.TrimSpace(parts[0])
                  license, details := fetchKotlinLicense(pkg)
                  result = append(result, Dependency{
                      Name:    pkg,
                      License: license,
                      Details: details,
                  })
              }
              return result
          }

          func fetchKotlinLicense(pkgName string) (string, string) {
              url := fmt.Sprintf("https://mvnrepository.com/artifact/%s", pkgName)
              return "Unknown", url
          }

          func generateHTMLReport(nodeDeps, pythonDeps, kotlinDeps []Dependency) {
              htmlContent := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <h2>Node.js Dependencies</h2>` +
                  generateTable(nodeDeps) +
                  `<h2>Python Dependencies</h2>` +
                  generateTable(pythonDeps) +
                  `<h2>Kotlin Dependencies</h2>` +
                  generateTable(kotlinDeps) +
                  `</body>
              </html>`

              os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
          }

          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := `<table>
              <tr>
                  <th>Package</th>
                  <th>License</th>
                  <th>Details</th>
              </tr>`

              for _, dep := range dependencies {
                  table += fmt.Sprintf(`<tr>
                      <td>%s</td>
                      <td>%s</td>
                      <td><a href="%s" target="_blank">View Details</a></td>
                  </tr>`, dep.Name, dep.License, dep.Details)
              }

              table += "</table>"
              return table
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 5: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-license-report
          path: dependency-license-report.html

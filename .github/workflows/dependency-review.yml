name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Set up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 4: Install Node.js Dependencies
      - name: Install All Node.js Dependencies
        run: npm install --legacy-peer-deps

      # Step 5: Create and Run License Check Script Inline
      - name: Analyze Licenses
        run: |
          # Create the analyze-licenses.js script
          cat << 'EOF' > analyze-licenses.js
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');

          // Function to determine if a license is copyleft
          const copyleftLicenses = [
              "GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL",
              "GPL-2.0", "GPL-3.0", "LGPL-2.1", "LGPL-3.0", "AGPL-3.0",
              "MPL-1.1", "MPL-2.0", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
              "EPL-1.0", "EPL-2.0", "OFL", "CPL", "OSL", "APL"
          ];

          const isCopyleftLicense = (license) =>
              copyleftLicenses.some((copyleft) => license.toUpperCase().includes(copyleft));

          async function fetchKotlinLicense(group, artifact, version) {
              try {
                  const url = `https://repo1.maven.org/maven2/${group.replace(/\./g, '/')}/${artifact}/${version}/${artifact}-${version}.pom`;
                  const response = await axios.get(url, { responseType: 'text' });
                  const licenseMatch = response.data.match(/<license><name>(.*?)<\/name>/);
                  return licenseMatch ? licenseMatch[1] : "Unknown";
              } catch {
                  return "Unknown";
              }
          }

          async function analyzeKotlinDependencies() {
              const results = [];
              const tomlFile = path.join('.', 'libs.versions.toml');
              if (fs.existsSync(tomlFile)) {
                  const content = fs.readFileSync(tomlFile, 'utf-8');
                  const matches = content.matchAll(
                      /(?<group>[\w\.]+)\s*=\s*["'](?<artifact>[\w\-]+):(?<version>[\w\.\-]+)["']/g
                  );
                  for (const match of matches) {
                      const { group, artifact, version } = match.groups;
                      const license = await fetchKotlinLicense(group, artifact, version);
                      const copyleft = isCopyleftLicense(license);
                      results.push({ group, artifact, version, license, copyleft });
                  }
              }
              return results;
          }

          async function main() {
              const kotlinResults = await analyzeKotlinDependencies();
              console.log("Kotlin Dependency Analysis Complete:", kotlinResults);
              fs.writeFileSync('dependency-license-report.html', JSON.stringify(kotlinResults, null, 2));
          }

          main().catch(console.error);
          EOF

          # Run the script
          node analyze-licenses.js

      # Step 6: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

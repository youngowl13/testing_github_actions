name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Create and Build License Checker in Go
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"
          )

          // Dependency holds information about a single package
          type Dependency struct {
              Name     string
              Version  string
              License  string
              Details  string
          }

          // Function to search for files recursively
          func findFile(root string, target string) string {
              var result string
              _ = filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
                  if err == nil && strings.EqualFold(info.Name(), target) {
                      result = path
                      return filepath.SkipDir
                  }
                  return nil
              })
              return result
          }

          // Function to fetch license for Node.js dependencies
          func fetchNodeLicense(packageName string) string {
              url := fmt.Sprintf("https://registry.npmjs.org/%s", packageName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Error fetching license"
              }
              defer resp.Body.Close()
              body, _ := ioutil.ReadAll(resp.Body)
              var data map[string]interface{}
              _ = json.Unmarshal(body, &data)
              if data != nil && data["license"] != nil {
                  return data["license"].(string)
              }
              return "Unknown"
          }

          // Function to fetch license for Python dependencies
          func fetchPythonLicense(packageName string) string {
              url := fmt.Sprintf("https://pypi.org/pypi/%s/json", packageName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Error fetching license"
              }
              defer resp.Body.Close()
              body, _ := ioutil.ReadAll(resp.Body)
              var data map[string]interface{}
              _ = json.Unmarshal(body, &data)
              if data != nil && data["info"] != nil {
                  info := data["info"].(map[string]interface{})
                  if info["license"] != nil {
                      return info["license"].(string)
                  }
              }
              return "Unknown"
          }

          // Function to fetch license for Kotlin dependencies
          func fetchKotlinLicense(groupID, artifactID, version string) string {
              url := fmt.Sprintf("https://mvnrepository.com/artifact/%s/%s/%s", groupID, artifactID, version)
              resp, err := http.Get(url)
              if err != nil {
                  return "Error fetching license"
              }
              defer resp.Body.Close()
              body, _ := ioutil.ReadAll(resp.Body)
              start := strings.Index(string(body), `<span class="b lic">`)
              if start != -1 {
                  end := strings.Index(string(body)[start:], "</span>")
                  if end != -1 {
                      return strings.TrimSpace(string(body)[start+len(`<span class="b lic">`) : start+end])
                  }
              }
              return "Unknown"
          }

          // Function to parse Node.js dependencies
          func parseNodeDependencies() []Dependency {
              var dependencies []Dependency
              filePath := findFile(".", "package.json")
              if filePath == "" {
                  fmt.Println("Node.js dependencies not found.")
                  return dependencies
              }
              file, _ := os.ReadFile(filePath)
              var data map[string]interface{}
              _ = json.Unmarshal(file, &data)
              if data != nil && data["dependencies"] != nil {
                  for pkg := range data["dependencies"].(map[string]interface{}) {
                      license := fetchNodeLicense(pkg)
                      dependencies = append(dependencies, Dependency{
                          Name:    pkg,
                          License: license,
                          Details: fmt.Sprintf("https://www.npmjs.com/package/%s", pkg),
                      })
                  }
              }
              return dependencies
          }

          // Function to parse Python dependencies
          func parsePythonDependencies() []Dependency {
              var dependencies []Dependency
              filePath := findFile(".", "requirements.txt")
              if filePath == "" {
                  filePath = findFile(".", "requirement.txt")
              }
              if filePath == "" {
                  fmt.Println("Python dependencies not found.")
                  return dependencies
              }
              file, _ := os.ReadFile(filePath)
              lines := strings.Split(string(file), "\n")
              for _, line := range lines {
                  if line != "" {
                      pkg := strings.Split(line, "==")[0]
                      license := fetchPythonLicense(pkg)
                      dependencies = append(dependencies, Dependency{
                          Name:    pkg,
                          License: license,
                          Details: fmt.Sprintf("https://pypi.org/project/%s", pkg),
                      })
                  }
              }
              return dependencies
          }

          // Function to parse Kotlin dependencies
          func parseKotlinDependencies() []Dependency {
              var dependencies []Dependency
              filePath := findFile(".", "libs.versions.toml")
              if filePath == "" {
                  fmt.Println("Kotlin dependencies not found.")
                  return dependencies
              }
              file, _ := os.ReadFile(filePath)
              lines := strings.Split(string(file), "\n")
              for _, line := range lines {
                  if strings.Contains(line, "=") {
                      parts := strings.Split(line, "=")
                      pkg := strings.TrimSpace(parts[0])
                      license := fetchKotlinLicense("groupID", pkg, "version")
                      dependencies = append(dependencies, Dependency{
                          Name:    pkg,
                          License: license,
                          Details: fmt.Sprintf("https://mvnrepository.com/artifact/groupID/%s", pkg),
                      })
                  }
              }
              return dependencies
          }

          // Main function
          func main() {
              nodeDeps := parseNodeDependencies()
              pythonDeps := parsePythonDependencies()
              kotlinDeps := parseKotlinDependencies()

              fmt.Println("Node.js Dependencies:", nodeDeps)
              fmt.Println("Python Dependencies:", pythonDeps)
              fmt.Println("Kotlin Dependencies:", kotlinDeps)
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 5: Upload License Report
      - name: Upload License Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-license-report
          path: dependency-license-report.html

name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Create and Build License Checker in Go
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "io/ioutil"
              "os"
              "strings"
          )

          type Dependency struct {
              Name    string
              License string
              Details string
          }

          func main() {
              nodeDeps := parseNodeDependencies()
              pythonDeps := parsePythonDependencies()
              kotlinDeps := parseKotlinDependencies()

              htmlContent := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <h2>Node.js Dependencies</h2>
                  ` + generateTable(nodeDeps) + `
                  <h2>Python Dependencies</h2>
                  ` + generateTable(pythonDeps) + `
                  <h2>Kotlin Dependencies</h2>
                  ` + generateTable(kotlinDeps) + `
              </body>
              </html>
              `

              err := os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
              if err != nil {
                  fmt.Println("Error writing HTML report:", err)
                  os.Exit(1)
              }

              fmt.Println("HTML report successfully generated at dependency-license-report.html")
          }

          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := `<table>
                  <tr>
                      <th>Package</th>
                      <th>License</th>
                      <th>Details</th>
                  </tr>`

              for _, dep := range dependencies {
                  table += fmt.Sprintf(`<tr class="%s">
                      <td>%s</td>
                      <td>%s</td>
                      <td><a href="%s" target="_blank">View Details</a></td>
                  </tr>`, getClass(dep.License), dep.Name, dep.License, dep.Details)
              }

              table += "</table>"
              return table
          }

          func getClass(license string) string {
              if strings.Contains(license, "GPL") || strings.Contains(license, "Copyleft") {
                  return "copyleft"
              }
              return "non-copyleft"
          }

          func parseNodeDependencies() []Dependency {
              if _, err := os.Stat("package.json"); os.IsNotExist(err) {
                  fmt.Println("No Node.js dependencies found.")
                  return nil
              }
              // Add logic to parse package.json and fetch licenses
              return []Dependency{}
          }

          func parsePythonDependencies() []Dependency {
              if _, err := os.Stat("requirements.txt"); os.IsNotExist(err) && os.IsNotExist(os.Stat("requirement.txt")) {
                  fmt.Println("No Python dependencies found.")
                  return nil
              }
              // Add logic to parse requirements.txt and fetch licenses
              return []Dependency{}
          }

          func parseKotlinDependencies() []Dependency {
              if _, err := os.Stat("libs.versions.toml"); os.IsNotExist(err) {
                  fmt.Println("No Kotlin dependencies found.")
                  return nil
              }
              // Add logic to parse libs.versions.toml and fetch licenses
              return []Dependency{}
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 5: Upload License Report
      - name: Upload License Report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-license-report
          path: dependency-license-report.html

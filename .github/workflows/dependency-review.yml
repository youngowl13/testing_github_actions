name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          # Write the Go source code with version details extraction and dual Python file support
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "io/fs"
              "net/http"
              "os"
              "path/filepath"
              "strings"
          )

          // Dependency holds the details for a dependency.
          type Dependency struct {
              Name     string
              Version  string
              License  string
              Details  string
              Copyleft bool
          }

          // Expanded list of copyleft license keywords for detection.
          var copyleftLicenses = []string{
              "GPL",
              "GNU GENERAL PUBLIC LICENSE",
              "LGPL",
              "GNU LESSER GENERAL PUBLIC LICENSE",
              "AGPL",
              "GNU AFFERO GENERAL PUBLIC LICENSE",
              "MPL",
              "MOZILLA PUBLIC LICENSE",
              "CC-BY-SA",
              "CREATIVE COMMONS ATTRIBUTION-SHAREALIKE",
              "EPL",
              "ECLIPSE PUBLIC LICENSE",
              "OFL",
              "OPEN FONT LICENSE",
              "CPL",
              "COMMON PUBLIC LICENSE",
              "OSL",
              "OPEN SOFTWARE LICENSE",
              "APL",
              "ACADEMIC PUBLIC LICENSE",
          }

          // isCopyleftLicense returns true if the license string contains any copyleft keyword.
          func isCopyleftLicense(license string) bool {
              license = strings.ToUpper(license)
              for _, copyleft := range copyleftLicenses {
                  if strings.Contains(license, copyleft) {
                      return true
                  }
              }
              return false
          }

          func main() {
              // Locate dependency files.
              nodeFile := findFile(".", "package.json")
              pythonFile := findFile(".", "requirements.txt")
              if pythonFile == "" {
                  pythonFile = findFile(".", "requirement.txt")
              }

              // Parse dependencies.
              nodeDeps := parseNodeDependencies(nodeFile)
              pythonDeps := parsePythonDependencies(pythonFile)

              // Generate the HTML report.
              generateHTMLReport(nodeDeps, pythonDeps)
              fmt.Println("Dependency license report generated: dependency-license-report.html")
          }

          // findFile searches for the given target file starting at root.
          func findFile(root, target string) string {
              var found string
              filepath.WalkDir(root, func(path string, d fs.DirEntry, err error) error {
                  if err != nil {
                      return nil
                  }
                  if d.Name() == target {
                      found = path
                      return filepath.SkipDir
                  }
                  return nil
              })
              return found
          }

          // parseNodeDependencies reads and parses dependencies from package.json.
          func parseNodeDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Node.js dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading package.json:", err)
                  return nil
              }

              var data map[string]interface{}
              if err := json.Unmarshal(file, &data); err != nil {
                  fmt.Println("Error parsing package.json:", err)
                  return nil
              }

              dependencies, ok := data["dependencies"].(map[string]interface{})
              if !ok {
                  fmt.Println("No dependencies found in package.json.")
                  return nil
              }

              for name, ver := range dependencies {
                  versionStr, ok := ver.(string)
                  if !ok {
                      versionStr = "Unknown"
                  }
                  license, details := fetchNodeLicense(name)
                  result = append(result, Dependency{
                      Name:     name,
                      Version:  versionStr,
                      License:  license,
                      Details:  details,
                      Copyleft: isCopyleftLicense(license),
                  })
              }
              return result
          }

          // fetchNodeLicense retrieves the license for a Node.js package from the npm registry.
          func fetchNodeLicense(pkgName string) (string, string) {
              url := fmt.Sprintf("https://registry.npmjs.org/%s", pkgName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", url
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
                  return "Unknown", url
              }

              latestTag, ok := data["dist-tags"].(map[string]interface{})["latest"].(string)
              if !ok {
                  return "Unknown", url
              }

              versions, ok := data["versions"].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              versionData, ok := versions[latestTag].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              license, ok := versionData["license"].(string)
              if !ok {
                  return "Unknown", url
              }

              return license, fmt.Sprintf("https://www.npmjs.com/package/%s", pkgName)
          }

          // parsePythonDependencies reads and parses dependencies from requirements.txt or requirement.txt.
          func parsePythonDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Python dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := os.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading requirements file:", err)
                  return nil
              }

              lines := strings.Split(string(file), "\n")
              for _, line := range lines {
                  if line == "" {
                      continue
                  }
                  parts := strings.Split(line, "==")
                  pkgName := parts[0]
                  versionStr := "Unknown"
                  if len(parts) > 1 {
                      versionStr = parts[1]
                  }
                  license, details := fetchPythonLicense(pkgName)
                  result = append(result, Dependency{
                      Name:     pkgName,
                      Version:  versionStr,
                      License:  license,
                      Details:  details,
                      Copyleft: isCopyleftLicense(license),
                  })
              }
              return result
          }

          // fetchPythonLicense retrieves the license for a Python package from PyPI.
          func fetchPythonLicense(pkgName string) (string, string) {
              url := fmt.Sprintf("https://pypi.org/pypi/%s/json", pkgName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", url
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
                  return "Unknown", url
              }

              info, ok := data["info"].(map[string]interface{})
              if !ok {
                  return "Unknown", url
              }

              license, ok := info["license"].(string)
              if !ok || license == "" {
                  classifiers, ok := info["classifiers"].([]interface{})
                  if ok {
                      for _, classifier := range classifiers {
                          if class, ok := classifier.(string); ok && strings.Contains(class, "License") {
                              license = class
                              break
                          }
                      }
                  }
              }

              return license, url
          }

          // generateHTMLReport creates the HTML file for the dependency license report.
          func generateHTMLReport(nodeDeps, pythonDeps []Dependency) {
              htmlContent := `<!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                      .unknown { background-color: #fff3cd; color: #856404; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <h2>Node.js Dependencies</h2>` +
                  generateTable(nodeDeps) +
                  `<h2>Python Dependencies</h2>` +
                  generateTable(pythonDeps) +
                  `</body>
              </html>`

              os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
          }

          // generateTable creates an HTML table for a list of dependencies.
          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := `<table>
              <tr>
                  <th>Package</th>
                  <th>Version</th>
                  <th>License</th>
                  <th>Details</th>
              </tr>`

              for _, dep := range dependencies {
                  class := "non-copyleft"
                  if dep.License == "Unknown" {
                      class = "unknown"
                  } else if dep.Copyleft {
                      class = "copyleft"
                  }
                  table += fmt.Sprintf(`<tr class="%s">
                      <td>%s</td>
                      <td>%s</td>
                      <td>%s</td>
                      <td><a href="%s" target="_blank">View Details</a></td>
                  </tr>`, class, dep.Name, dep.Version, dep.License, dep.Details)
              }

              table += "</table>"
              return table
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 5: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

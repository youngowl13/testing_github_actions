name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Setup Java (for Gradle)
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 4: Generate Kotlin Dependencies Report via Gradle
      - name: Generate Kotlin License Report
        run: |
          ./gradlew -q dependencies --write-locks
          ./gradlew licenseReport

      # Step 5: Create and Build License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cd license-checker
          cat << 'EOF' > main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"
          )

          type Dependency struct {
              Name     string
              License  string
              Details  string
              Copyleft bool
          }

          var copyleftLicenses = []string{"GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL", "OFL", "CPL", "OSL", "APL"}

          func isCopyleftLicense(license string) bool {
              license = strings.ToUpper(license)
              for _, copyleft := range copyleftLicenses {
                  if strings.Contains(license, copyleft) {
                      return true
                  }
              }
              return false
          }

          func main() {
              kotlinDeps := parseKotlinDependencies("build/reports/dependency-license/licenses.json")
              fmt.Println("Kotlin Dependency Licenses:", kotlinDeps)

              generateHTMLReport(kotlinDeps)
              fmt.Println("Dependency license report generated: dependency-license-report.html")
          }

          func parseKotlinDependencies(filePath string) []Dependency {
              if filePath == "" {
                  fmt.Println("No Kotlin dependencies found.")
                  return nil
              }

              var result []Dependency
              file, err := ioutil.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading Kotlin license report:", err)
                  return nil
              }

              var data []map[string]interface{}
              if err := json.Unmarshal(file, &data); err != nil {
                  fmt.Println("Error parsing Kotlin license report:", err)
                  return nil
              }

              for _, dep := range data {
                  name, _ := dep["moduleName"].(string)
                  license, _ := dep["moduleLicense"].(string)
                  if license == "" {
                      license, _ = fetchLicenseFromOSSIndex(name)
                  }
                  result = append(result, Dependency{
                      Name:     name,
                      License:  license,
                      Details:  fmt.Sprintf("https://central.sonatype.com/artifact/%s", strings.ReplaceAll(name, ".", "/")),
                      Copyleft: isCopyleftLicense(license),
                  })
              }
              return result
          }

          func fetchLicenseFromOSSIndex(pkgName string) (string, error) {
              url := fmt.Sprintf("https://ossindex.sonatype.org/api/v3/component-report/%s", pkgName)
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", err
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
                  return "Unknown", err
              }

              coordinates, ok := data["coordinates"].(string)
              if ok {
                  return coordinates, nil
              }
              return "Unknown", nil
          }

          func generateHTMLReport(kotlinDeps []Dependency) {
              htmlContent := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <h2>Kotlin Dependencies</h2>` +
                  generateTable(kotlinDeps) +
                  `</body>
              </html>`

              os.WriteFile("dependency-license-report.html", []byte(htmlContent), 0644)
          }

          func generateTable(dependencies []Dependency) string {
              if len(dependencies) == 0 {
                  return "<p>No dependencies found.</p>"
              }

              table := `<table>
              <tr>
                  <th>Package</th>
                  <th>License</th>
                  <th>Details</th>
              </tr>`

              for _, dep := range dependencies {
                  class := "non-copyleft"
                  if dep.Copyleft {
                      class = "copyleft"
                  }
                  table += fmt.Sprintf(`<tr class="%s">
                      <td>%s</td>
                      <td>%s</td>
                      <td><a href="%s" target="_blank">View Details</a></td>
                  </tr>`, class, dep.Name, dep.License, dep.Details)
              }

              table += "</table>"
              return table
          }
          EOF
          go mod init license-checker
          go mod tidy
          go build -o ../checker

      # Step 6: Run License Checker
      - name: Run License Checker
        run: ./checker

      # Step 7: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html

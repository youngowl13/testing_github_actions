name: Dependency License Check

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  license-check:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up Go Environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      # Step 3: Create Go License Checker
      - name: Create and Build License Checker
        run: |
          mkdir -p license-checker
          cat << 'EOF' > license-checker/main.go
          package main

          import (
              "encoding/json"
              "fmt"
              "html/template"
              "io/ioutil"
              "net/http"
              "os"
              "path/filepath"
              "strings"
              "sync"
          )

          type Dependency struct {
              Name        string
              Version     string
              License     string
              Link        string
              IsCopyleft  bool
              DependencyType string
          }

          var copyleftLicenses = []string{
              "GPL", "LGPL", "AGPL", "MPL", "CC-BY-SA", "EPL",
              "GPL-2.0", "GPL-3.0", "LGPL-2.1", "LGPL-3.0", "AGPL-3.0",
              "MPL-1.1", "MPL-2.0", "CC-BY-SA-3.0", "CC-BY-SA-4.0",
              "EPL-1.0", "EPL-2.0", "OFL", "CPL", "OSL", "APL",
          }

          func isCopyleftLicense(license string) bool {
              for _, copyleft := range copyleftLicenses {
                  if strings.Contains(strings.ToUpper(license), strings.ToUpper(copyleft)) {
                      return true
                  }
              }
              return false
          }

          func fetchLicenseData(url string) (string, error) {
              resp, err := http.Get(url)
              if err != nil {
                  return "Unknown", err
              }
              defer resp.Body.Close()

              var data map[string]interface{}
              if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
                  return "Unknown", err
              }

              license := "Unknown"
              if info, exists := data["info"].(map[string]interface{}); exists {
                  if lic, found := info["license"].(string); found && lic != "" {
                      license = lic
                  } else if classifiers, ok := info["classifiers"].([]interface{}); ok {
                      for _, classifier := range classifiers {
                          if str, ok := classifier.(string); ok && strings.HasPrefix(str, "License ::") {
                              license = strings.TrimPrefix(str, "License :: ")
                              break
                          }
                      }
                  }
              }
              return license, nil
          }

          func processPythonDependencies(filePath string, dependencies *[]Dependency, wg *sync.WaitGroup) {
              defer wg.Done()
              data, err := ioutil.ReadFile(filePath)
              if err != nil {
                  fmt.Println("Error reading requirements.txt:", err)
                  return
              }

              lines := strings.Split(string(data), "\n")
              for _, line := range lines {
                  if strings.TrimSpace(line) == "" || strings.HasPrefix(line, "#") {
                      continue
                  }
                  parts := strings.Split(line, "==")
                  name := parts[0]
                  version := "Latest"
                  if len(parts) > 1 {
                      version = parts[1]
                  }
                  license, _ := fetchLicenseData(fmt.Sprintf("https://pypi.org/pypi/%s/json", name))
                  *dependencies = append(*dependencies, Dependency{
                      Name:          name,
                      Version:       version,
                      License:       license,
                      Link:          fmt.Sprintf("https://pypi.org/project/%s", name),
                      IsCopyleft:    isCopyleftLicense(license),
                      DependencyType: "Python",
                  })
              }
          }

          func generateHTMLReport(dependencies []Dependency, outputPath string) {
              tmpl := `
              <!DOCTYPE html>
              <html>
              <head>
                  <title>Dependency License Report</title>
                  <style>
                      table { width: 100%; border-collapse: collapse; }
                      th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                      th { background-color: #f2f2f2; }
                      .copyleft { background-color: #f8d7da; color: #721c24; }
                      .non-copyleft { background-color: #d4edda; color: #155724; }
                  </style>
              </head>
              <body>
                  <h1>Dependency License Report</h1>
                  <table>
                      <tr>
                          <th>Package</th>
                          <th>Version</th>
                          <th>License</th>
                          <th>Link</th>
                          <th>Type</th>
                      </tr>
                      {{ range . }}
                      <tr class="{{if .IsCopyleft}}copyleft{{else}}non-copyleft{{end}}">
                          <td>{{.Name}}</td>
                          <td>{{.Version}}</td>
                          <td>{{.License}}</td>
                          <td><a href="{{.Link}}" target="_blank">Details</a></td>
                          <td>{{.DependencyType}}</td>
                      </tr>
                      {{ end }}
                  </table>
              </body>
              </html>
              `
              f, _ := os.Create(outputPath)
              defer f.Close()

              t := template.Must(template.New("report").Parse(tmpl))
              t.Execute(f, dependencies)
          }

          func main() {
              var dependencies []Dependency
              var wg sync.WaitGroup

              wg.Add(1)
              go processPythonDependencies("requirements.txt", &dependencies, &wg)

              wg.Wait()
              generateHTMLReport(dependencies, "dependency-license-report.html")
          }
          EOF

          cd license-checker
          go mod init license-checker
          go build -o license-checker .
          cd ..

      # Step 4: Run License Checker
      - name: Run License Checker
        run: ./license-checker/license-checker

      # Step 5: Upload HTML Report
      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-license-report
          path: dependency-license-report.html
